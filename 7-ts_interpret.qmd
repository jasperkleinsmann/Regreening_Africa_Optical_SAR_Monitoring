---
title: "8-ts_interpret"
author: "Jasper Kleinsmann"
---

## Libraries
```{r}
library(terra)
library(sf)
library(lubridate)
library(data.table)
library(tsibble)
library(zoo)
library(tidyverse)
library(scales)
```

## Select country
```{r}
country <- 'Rwanda'
```

## Import and load data
```{r}
# Landsat 8 data
load(paste0('output/models/', country, '_l8_fc_plt.RDS')) # SARIMA forecast
l8_ts_plt <- data.table(read_csv(paste0('output/time_series/', country, '_l8_plt.csv'))) # plot tsbille

# Seninel 1 data
load(paste0('output/models/', country, '_s1_fc_plt.RDS')) # SARIMA forecast
s1_ts_plt <- data.table(read_csv(paste0('output/time_series/', country, '_s1_plt.csv')))

# plot data
plots <- st_read(paste0('output/plot_data/', country, '/', country, '_plots_final.GeoJSON'))
```

## Landsat 8
#### Clean and merge actual and forecasted NDVI
```{r}
# Clean dates
l8_fc_plt_dt <- l8_fc_plt[,c('.mean', 'yearmonth', 'plotID', 'upper_95', 'lower_95')]
l8_fc_plt_dt$yearmon <- as.Date(ISOdate(year(l8_fc_plt_dt$yearmonth), month(l8_fc_plt_dt$yearmonth), 15))

# Merge actual ndvi with the forecast
l8_fc_plt_dt <- merge(l8_fc_plt_dt, l8_ts_plt[,c('ndvi', 'ndvi_int', 'plotID', 'yearmon')], 
                   by=c('yearmon', 'plotID'), all.x=T)
l8_fc_plt_dt <- data.table(l8_fc_plt_dt)
```

#### Assess difference actual and predicted NDVI
```{r}
# Check whether montly observation is within 95% CI
l8_fc_plt_dt$above_95 <- l8_fc_plt_dt$ndvi_int > l8_fc_plt_dt$upper_95
l8_fc_plt_dt <- l8_fc_plt_dt[order(l8_fc_plt_dt$yearmon),]
l8_fc_plt_dt <- l8_fc_plt_dt[order(l8_fc_plt_dt$plotID),]

# Check consequetive months 
l8_fc_plt_dt$regreening <- 0
l8_fc_plt_dt$sgnf_outlier <- 0

# Determine which plots have >= 2 months higher NDVI than the predicted
for (plt in unique(l8_fc_plt_dt$plotID)){
  print(plt)
  plot_obs <- l8_fc_plt_dt[l8_fc_plt_dt$plotID==plt,]
  
  index_outlier <- which(plot_obs$above_95==T)
  consq_outlier <- which(diff(index_outlier) == 1)
    
  if (length(consq_outlier) > 0){
    l8_fc_plt_dt$regreening[l8_fc_plt_dt$plotID==plt] <- 1
    l8_fc_plt_dt[l8_fc_plt_dt$plotID==plt,][index_outlier,][consq_outlier+1,]$sgnf_outlier <- 1
  }
}

# Determine regreening yes/no
l8_green <- l8_fc_plt_dt[,.(l8_green=mean(regreening), l8_green_sum=sum(sgnf_outlier, na.rm=T)), by='plotID']
# Merge with plot data
plots <- merge(plots, l8_green, by='plotID', all.x=T, all.y=F)
```

## Sentinel-1
#### Clean and merge actual and forecasted RVI
```{r}
# Clean dates
s1_fc_plt_dt <- s1_fc_plt[,c('.mean', 'yearmonth', 'plotID', 'upper_95', 'lower_95')]
s1_fc_plt_dt$yearmon <- as.Date(ISOdate(year(s1_fc_plt$yearmonth), month(s1_fc_plt$yearmonth), 15))

# Merge actual ndvi with the forecast
s1_fc_plt_dt <- merge(s1_fc_plt_dt, s1_ts_plt[,c('rvi', 'rvi_int', 'plotID', 'yearmon')], 
                   by=c('yearmon', 'plotID'), all.x=T)
s1_fc_plt_dt <- data.table(s1_fc_plt_dt)
```

#### Assess difference actual and predicted NDVI
```{r}
# Check whether montly observation is within 95% CI
s1_fc_plt_dt$above_95 <- s1_fc_plt_dt$rvi_int > s1_fc_plt_dt$upper_95
s1_fc_plt_dt <- s1_fc_plt_dt[order(s1_fc_plt_dt$yearmon),]
s1_fc_plt_dt <- s1_fc_plt_dt[order(s1_fc_plt_dt$plotID),]

# Check consequetive months 
s1_fc_plt_dt$regreening <- 0
s1_fc_plt_dt$sgnf_outlier <- 0

for (plt in unique(s1_fc_plt_dt$plotID)){
  print(plt)
  plot_obs <- s1_fc_plt_dt[s1_fc_plt_dt$plotID==plt,]
  
  index_outlier <- which(plot_obs$above_95==T)
  consq_outlier <- which(diff(index_outlier) == 1)
  
  if (length(consq_outlier) > 0){
    s1_fc_plt_dt$regreening[s1_fc_plt_dt$plotID==plt] <- 1
    s1_fc_plt_dt[s1_fc_plt_dt$plotID==plt,][index_outlier,][consq_outlier+1,]$sgnf_outlier <- 1
  }
}

# Determine regreening yes/no
s1_fc_plt_dt[,.(s1_green=mean(regreening),s1_green_sum=sum(sgnf_outlier, na.rm=T)), by='plotID']
# Merge with plot data
plots <- merge(plots, s1_fc_plt_dt[,c('s1_green', 's1_green_sum', 'plotID')], by='plotID', all.x=T, all.y=F)
```

## Save the plot data with the regreening information
```{r}
st_write(plots, dsn=paste0('output/plot_data/', country, '/', country, '_plots_green.GeoJSON'), driver='GeoJSON')
```

## Aggregate the plot level regreening performance
```{r}
plots_dt <- data.table(plots)

# Aggregate per county
county_green <- plots_dt[,.(l8_green=sum(l8_green),
                         number_sites=length(l8_green),
                         perc=sum(l8_green)/length(l8_green),
                         l8_ha=sum(Hectare),
                         l8_ha_green=sum(Hectare[l8_green==1]),
                         l8_ha_perc=sum(Hectare[l8_green==1])/sum(Hectare),
                         avg_size=mean(Hectare,na.rm=T)),
                      by=list(county)]

# Select only the counties with more than 10 Hectares of restoration area
county_green[county_green$l8_ha>10,]
```
