---
title: "1-create_plot_data"
author: "Jasper Kleinsmann"
---

## Load packages

```{r}
library(data.table)
library(tidyverse)
library(dplyr)
library(sf)
library(magrittr)
library(ggplot2)
library(lwgeom) 
```

## Indicate the country

```{r}
country <- 'Rwanda'
```

## Import and merge TP and FMNR data

```{r}
cohort.tree <- data.table(read_csv(paste0('data/plot_data/', country, '_tp_species.csv')))
farmer.plot.info <- data.table(read_csv(paste0('data/plot_data/', country, '_tp_profile.csv')))
plots.csv <- data.table(read_csv(paste0('data/plot_data/', country, '_tp_polygon.csv')))

# Indicate that it is tree planting (tp)
cohort.tree$type <- 'tp'
farmer.plot.info$type <- 'tp'
plots.csv$type <- 'tp'

```

Change some column names

```{r}
# Make tp and fmrn datasets consistent
names(cohort.tree)[names(cohort.tree) == 'tp_latitude'] <- 'latitude'
names(cohort.tree)[names(cohort.tree) == 'tp_longitude'] <- 'longitude'
names(cohort.tree)[names(cohort.tree) == 'tp_altitude'] <- 'altitude'
names(cohort.tree)[names(cohort.tree) == 'tp_accuracy'] <- 'accuracy'

```

# Re-order plot.info data

```{r}
farmer.plot.info <- farmer.plot.info[order(farmer.plot.info$farmerID),]
```

## Make the plot data spatial and assign an individual plot ID

```{r}
# Make sf from plot.geom
plots.attr <- plots.csv[,-c("area_polygon")] # select all columns except for 'Plot"
geometry <- st_as_sfc(plots.csv$area_polygon, crs = 4326)
plots.spat <- st_sf(plots.attr, geometry)

# Clean plot.spat file
names(plots.spat)[names(plots.spat) == 'plotID'] <- 'Plot_id'
plots.spat <- plots.spat[plots.spat$area_msq!=0,] # Remove where area is 0

# Assign plotID to datasets
plotID <- seq(1, nrow(plots.spat))
plots.spat$plotID <- seq(1, nrow(plots.spat))

# Convert multipolygon into single polygons
plots.spat <- st_cast(plots.spat, "POLYGON")
#Calculate size of (potential) new polygons
plots.spat$area <- as.numeric(st_area(plots.spat)/10000) # in ha
plots.spat <- plots.spat[plots.spat$area>0,] # remove plots with area = 0
# Order on polygon size and then remove duplicates (smallest)
plots.spat <- plots.spat[order(plots.spat$plotID),]
plots.spat <- plots.spat[-c(which(duplicated(plots.spat$plotID, fromLast=F))),]
# Make geometries valid
plots.spat <- st_make_valid(plots.spat)
```

### Exclude and merge overlapping geometries

```{r}
# Set buffer of 0m to remove intersection issues
sf::sf_use_s2(FALSE)
plots.spat <- st_buffer(plots.spat, 0)

# Create empty df to fill
for (type in unique(plots.spat$type)){
  print(type)
  plots_type <- plots.spat[plots.spat$type==type,]
  
  for (pl in unique(plots_type$plotID)){
    
    intersect_rows <- st_intersection(plots_type[plots_type$plotID==pl,], plots_type)
    print(pl)
    # Check whether plot has not yet been excluded yet
    if (nrow(intersect_rows)!=0){
      
      intersect_rows$OverlapArea <- st_area(intersect_rows)
      other_plots <- intersect_rows[intersect_rows$plotID.1!=pl,]
      sum_overlap <- sum(other_plots$OverlapArea)
      area_plot_interest <- intersect_rows$OverlapArea[intersect_rows$plotID.1==pl]
      perc_overlap <- (sum_overlap/area_plot_interest)*100
      # Set threshold for when percentage overlap is too high (now: 60%)
      if (as.integer(perc_overlap)>as.integer(60)){
        # Find plot with largest overlap
        largest_overlap_plotID <- other_plots$plotID.1[other_plots$OverlapArea==max(other_plots$OverlapArea)]
        # Select row of largest overlapping plot
        largest_overlap_row <- plots_type[plots_type$plotID==largest_overlap_plotID,]
        # Join the plot of interest and the largest overlapping plot
        join_interest_largest <- rbind(plots_type[plots_type$plotID==pl,], largest_overlap_row)
        # Select the biggest of the two
        largest_plot_row <- join_interest_largest[join_interest_largest$area_msq==
                                                    max(join_interest_largest$area_msq),]
        # Join the geometries with the largest-overlap plot
        joined_geom <- st_union(plots_type[plots_type$plotID==pl,], largest_plot_row, is_coverage=T)
        plots_type$geometry[plots_type$plotID==largest_plot_row$plotID] <- joined_geom$geometry
        # Exclude overlapping plot from df
        smallest_plot_ID <- join_interest_largest$plotID[join_interest_largest$area_msq==
                                                           min(join_interest_largest$area_msq)]
        plots.spat <- plots.spat[plots.spat$plotID!=smallest_plot_ID,]
        
        print(paste(type, 'polygon excluded'))
      }
    }
    else{print('Plot already exlcuded')}
  }
}
```

## Identify unique plots and give unique ID

If one farmer has multiple plots, then assign a unique ID in the "MultiplePlots" column \#### Do this for plots.spat file

```{r}
# for plots.spat dt
dupl.index <- which(duplicated(plots.spat$farmerID) | duplicated(plots.spat$farmerID, fromLast=TRUE)==T)
dupl.unique <- unique(plots.spat$farmerID[dupl.index])

plots.spat$MultiplePlots <- 0
for (i in dupl.unique){
  num.plots.farm <- nrow(plots.spat[plots.spat$farmerID==i,])
  index.plots.farm <- which(plots.spat$farmerID==i)
  for (pl in 1:length(index.plots.farm)){
    plots.spat$MultiplePlots[index.plots.farm[pl]] <- pl
  }
}
plots.spat$FarmerPlotID <- NA
plots.spat$FarmerPlotID <- paste0(plots.spat$farmerID, '_', plots.spat$MultiplePlots)
```

#### Do this for the farmer info dataset

```{r}
dupl.index <- which(duplicated(farmer.plot.info$farmerID) | duplicated(farmer.plot.info$farmerID, fromLast=TRUE)==T)
dupl.unique <- unique(farmer.plot.info$farmerID[dupl.index])

farmer.plot.info$MultiplePlots <- 0
for (i in dupl.unique){
  num.plots.farm <- nrow(farmer.plot.info[farmer.plot.info$farmerID==i,])
  index.plots.farm <- which(farmer.plot.info$farmerID==i)
  for (pl in 1:length(index.plots.farm)){
    farmer.plot.info$MultiplePlots[index.plots.farm[pl]] <- pl
  }
}
farmer.plot.info$FarmerPlotID <- NA
farmer.plot.info$FarmerPlotID <- paste0(farmer.plot.info$farmerID, '_', farmer.plot.info$MultiplePlots)
```

## Combine cohort and plot data based on farmer ID and spatial location

If one farmer has multiple plots, the cohort data is merged to the plot data based on the spatial coordinates of the cohort data

```{r}
# Remove the rows with NAs in the longitude, latitude or farmerID
cohort.tree <- na.omit(cohort.tree, cols=c('longitude', 'latitude','farmerID'))
# Make the cohort.tree observations spatial
cohort.spat <- st_as_sf(cohort.tree, coords = c("longitude", "latitude"), crs = 4326)

sf::sf_use_s2(FALSE) # turn of s2 to avoid error in st_intersection

# 1 lat = ~ 111111 m at the equator --> 5m = 0.000045 (7m = 0.000063)
plots.buf <- st_buffer(plots.spat, 0.000063)

cohort.spat$plotID <- NA
for (pl in 1:nrow(plots.buf)){
  print(pl)
  # If on plot per farmer --> merge on farmerID
  if(plots.buf$MultiplePlots[pl]==0){
    match_farmerID <- cohort.spat$farmerID[cohort.spat$farmerID==plots.buf$farmerID[pl]]
    cohort.spat$plotID[cohort.spat$farmerID==match_farmerID] <- plots.buf$plotID[pl]
  }
  # If multiple plots per farmer --> merge based on spatial location
  else{
    trees.in.plot.index <- which(st_within(cohort.spat, plots.buf[pl,], sparse=F)==T)
    trees.in.plot <- cohort.spat[c(trees.in.plot.index),]
    
    if (nrow(trees.in.plot) >= 1) {
      for (t in 1:nrow(trees.in.plot)){
        if (trees.in.plot$farmerID[t]==plots.buf$farmerID[pl]){
          cohort.spat$plotID[trees.in.plot.index[t]] <- plots.buf$plotID[pl]
        }
      }
    }
  }
}
```

## Assign data to cohort and farmer data

#### Cohort data

```{r}
months <- c('Jan'=1, 'Feb'=2, 'Mar'=3, 'Apr'=4,'May'=5,'Jun'=6,'Jul'=7,'Aug'=8,'Sep'=9,
            'Oct'=10,'Nov'=11,'Dec'=12)
cohort.spat$plant_date <- as.Date(ISOdate(2000,1,1))

for (i in 1:nrow(cohort.spat)){
  print(i)
  
  date_string <- cohort.spat$date_planted[i]
  split_list <- strsplit(date_string, '/')
  
  cohort.spat$plant_date[i] <- as.Date(ISOdate(as.integer(split_list[[1]][2]), 
                                               as.integer(split_list[[1]][1]), 
                                               1))
}
```

#### Farmer data

```{r}
farmer.plot.info$plant_date_fmnr <- as.Date(ISOdate(2000,1,1))
for (i in 1:nrow(farmer.plot.info)){
  print(i)
  
  date_string <- farmer.plot.info$fmnr_start[i]
  split_list <- strsplit(date_string, '/')
  
  farmer.plot.info$plant_date_fmnr[i] <- as.Date(ISOdate(as.integer(split_list[[1]][2]), 
                                               as.integer(split_list[[1]][1]), 
                                               1))
}
```

## Indicate the first cohort at each plot

This is done for merging purposes later on. Cause only the first cohort information at each plot will be used to merge to the plot data.

```{r}
cohort.info <- data.table(st_drop_geometry(cohort.spat)) # remove geometry
cohort.info$FirstCohortPlotID <- 0

# Write down plotID only for the first cohort in plot
for (i in unique(cohort.info$plotID)){
  print(i)
  
  first_plant <- which(cohort.info[cohort.info$plotID==i,]$plant_date==min(cohort.info[cohort.info$plotID==i,]$plant_date))[1]
  cohort.info[cohort.info$plotID==i,]$FirstCohortPlotID[first_plant] <- i
}
```

## Merge all the data to plot data

#### Merge farmer data to the plot data

```{r}
farmer.plot.info.geom <- merge(farmer.plot.info[,c('county_region', 'district_commune_woreda', 
                                               'own_land', 'community_land', 'government_land', 'mosque_church_land', 
                                               'school_land', 'other_land', 'crops', 'croplist', 'unit', 
                                               'landsize', 'FarmerPlotID', 'plant_date_fmnr')], 
                               plots.spat[,c('farmerID', 'Plot_id', 'area_msq', 'plotID', 'MultiplePlots', 'FarmerPlotID',
                                             'type')], 
                               by='FarmerPlotID', all.x=F, all.y=T)
farmer.plot.info.spat <- st_as_sf(farmer.plot.info.geom) # Make spatial
```

#### Merge the farmer-plot data to the cohort data

```{r}
# Add cohort info
plots.all <- merge(farmer.plot.info.spat, cohort.info[,c('species_name', 'plant_date', 'number_planted', 
                                                         'number_survived', 'woodlot', 'internal_boundary', 
                                                         'external_boundary', 'garden', 'crop_field', 'pasture_grassland',
                                                         'fallow_bushland', 'other_sites', 'mgt_prunning', 'mgt_fencing', 
                                                         'mgt_weeding', 'mgt_watering','mgt_organic_fertilizer', 
                                                         'FirstCohortPlotID','use_firewood', 'local_name','mgt_thinning',
                                                         'mgt_pollarding_lopping','mgt_coppicing','mgt_others')], 
                   by.x='plotID', by.y = 'FirstCohortPlotID', all.x=T, all.y=F)
```

## Clean plot data for final

Thing may have changed in the geomtry after the merging of geometries. Therefore the spatial cleaning is done again.

```{r}
sf::sf_use_s2(FALSE)
plots.all <- st_buffer(plots.all, 0)
# Convert multipolygon into single polygons
plots.all <- st_cast(plots.all, "POLYGON")
# Recalculate the area after the spatial merges
plots.all$Hectare <- as.numeric(st_area(plots.all)/10000) # in ha
plots.all <- plots.all[plots.all$Hectare>0,] # remove plots with area = 0
# Order on polygon size 
plots.all <- plots.all[order(plots.all$Hectare),]
```

## Create centroids and combined multi-centroid data

```{r}
# Centroid
plot.centroid <- st_centroid(plots.all, of_largest_polygon=F)

# Buffer (7m)
#plots.buf <- st_buffer(plots.all, 0.000063)

# Multipolygon
centroid_multi <- plot.centroid %>% 
  st_combine()
```

## Write the data as GeoJONs and csv

```{r}
st_write(obj=plots.all, dsn=paste0('output/plot_data/', country, '/', country, '_plots_all.GeoJSON'), driver='GeoJSON')
st_write(obj=plots.all, dsn=paste0('output/plot_data/', country, '/', country, '_plots_all.csv'), driver='CSV')
st_write(obj=plot.centroid, dsn=paste0('output/plot_data/', country, '/', country, '_plot_centroid.GeoJSON'), driver='GeoJSON')
st_write(obj=plot.centroid, dsn=paste0('output/plot_data/', country, '/', country, '_plot_centroid.csv'), driver='CSV')
st_write(obj=centroid_multi, dsn=paste0('output/plot_data/', country, '/', country, '_centroid_multi.GeoJSON'), driver='GeoJSON')
st_write(obj=centroid_multi, dsn=paste0('output/plot_data/', country, '/', country, '_centroid_multi.csv'), driver='CSV')
```
