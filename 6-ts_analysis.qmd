---
title: "7-ts_analysis"
author: "Jasper Kleinsmann"
---

## Libraries

```{r}
library(feasts)
library(tsibble)
library(forecast)
library(stats)
library(zoo)
library(astsa)
library(TSA)
library(fable)
library(data.table)
library(tidyverse)
library(dplyr)
library(sf)
library(magrittr)
library(ggplot2)
library(scales)
library(lubridate)
library(BBmisc)
library(readr)
```

## Select country

```{r}
country <- 'Kenya'
```

## Import time series

```{r}
# Landsat 8
l8_ts <- data.table(read_csv(paste0('output/time_series/', country, '_l8_ts.csv'))) 
# Sentinel-1
s1_ts <- data.table(read_csv(paste0('output/time_series/', country, '_s1_ts.csv')))
# Filter out time stamps before the observation
l8_ts <- l8_ts[l8_ts$yearmon > as.Date('2013-01-01') & l8_ts$yearmon < as.Date('2022-11-01')] # start L8 observation
s1_ts <- s1_ts[s1_ts$yearmon > as.Date('2014-01-01') & s1_ts$yearmon < as.Date('2022-11-01')] # start S1 observation

# Import the plots data in include the plant date in the graph
plots <- fread(paste0('output/plot_data/', country, '/',country, '_plots_filtered.csv'))

```

# Country-level analysis

## Create country-level tsibble with lagged variables

#### Landsat 8

```{r}
# Group by yearmon
l8_ts_lag <- l8_ts %>% 
  group_by(yearmon) %>% 
  summarize(ndvi=mean(ndvi,na.rm=T),
            prcp=mean(prcp_month))

# Create lagged variables
l8_ts_lag <- l8_ts_lag %>% 
  filter(yearmon >= min(l8_ts$date, na.rm=T)) %>% # Remove rows before first observation
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         prcp_lag1=lag(prcp,1),
         prcp_lag2=lag(prcp,2),
         ndvi_int=na.approx(ndvi)) %>% # Fil gaps in time series
  as_tsibble(index=yearmonth)

# training and validation data
l8_ref_lag <- l8_ts_lag %>% filter(year(yearmonth) < 2017)
l8_val_lag <- l8_ts_lag %>% filter(year(yearmonth) >= 2017)

```

#### Sentinel-1
```{r}
# Group by yearmon
s1_ts_lag <- s1_ts %>% 
  group_by(yearmon) %>% 
  summarize(rvi=mean(VV,na.rm=T),
            prcp=mean(prcp_month))

# Create lagged variables
s1_ts_lag <- s1_ts_lag %>% 
  filter(yearmon >= min(s1_ts$date, na.rm=T)) %>% # Remove rows before first observation
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         prcp_lag1=shift(prcp,n=1,type='lag'),
         prcp_lag2=shift(prcp,n=2,type='lag'),
         rvi_int=na.approx(rvi)) %>% # Fil gaps in time series 
  as_tsibble(index=yearmonth)

s1_ref_lag <- s1_ts_lag %>% filter(year(yearmonth) < 2018)
s1_val_lag <- s1_ts_lag %>% filter(year(yearmonth) >= 2018)
```

## Fit SARIMA model (country)
#### Landsat 8
```{r}
# Train model
l8_armax_mod <- l8_ref_lag %>% 
  model(arima = ARIMA(ndvi ~ prcp + prcp_lag1 + prcp_lag2, stepwise=T, ic='aic')) %>% 
  report()

# Predict values
l8_fc_ts <- fabletools::forecast(l8_armax_mod, new_data = l8_val_lag[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2')])

# Extract confidence intervals
l8_ts_ci <- l8_fc_ts$ndvi %>% 
  hilo(level = 95) 
l8_fc_ts <- l8_fc_ts %>% 
  mutate(upper_95=l8_ts_ci$upper,
         lower_95=l8_ts_ci$lower)

# Plot results
ggplot()+
  geom_line(data=l8_ref_lag, 
            aes(x = yearmonth, y = ndvi_int - residuals(l8_armax_mod)$.resid), 
            col='darkred',lwd=0.9, alpha=0.8) +
  geom_line(data=l8_ts_lag, aes(x=yearmonth, y=ndvi_int), col='darkgreen',lwd=1)+
  geom_line(data=l8_fc_ts, aes(x = yearmonth, y = .mean), 
            col='darkred',lwd=0.9, lty=1)+
  #geom_line(data=l8_ts_lag, aes(x=yearmon, y=prcp/600), col='blue')
  geom_ribbon(data=l8_fc_ts, aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.1, fill='red', lwd=0.8)+
  labs(y='NDVI', x='Time', title=paste('Actual (green) vs predicted (red) vegetation including 95% CI'))
```

#### Sentinel-1
```{r}
# Train model
s1_armax_mod <- s1_ref_lag %>% 
  model(arima = ARIMA(rvi_int ~ prcp + prcp_lag1 + prcp_lag2, stepwise=T, ic='aic')) %>% 
  report()

# Predict values
s1_fc_ts <- fabletools::forecast(s1_armax_mod, new_data = s1_val_lag[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2')])

# Extract confidence intervals
s1_ts_ci <- s1_fc_ts$rvi_int %>% 
  hilo(level = 95) 
s1_fc_ts <- s1_fc_ts %>% 
  mutate(upper_95=s1_ts_ci$upper,
         lower_95=s1_ts_ci$lower)

# Plot results
ggplot()+
  geom_line(data=s1_ref_lag, 
            aes(x = yearmonth, y = rvi_int - residuals(s1_armax_mod)$.resid), 
            col='darkred',lwd=0.9, alpha=0.8) +
  geom_line(data=s1_ts_lag, aes(x=yearmonth, y=rvi_int), col='darkgreen',lwd=1)+
  geom_line(data=s1_fc_ts, aes(x = yearmonth, y = .mean), 
            col='darkred',lwd=0.9, lty=1)+
  geom_ribbon(data=s1_fc_ts, aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.1, fill='red', lwd=0.8)+
  labs(y='RVI', x='Time', title=paste('Actual (green) vs predicted (red) vegetation including 95% CI'))
```


# County-level analysis
## Create county-level tsibble with lagged variables
#### Landsat 8
```{r}
# Take mean ndvi and prcp per yearmon and county
l8_ts_by_cnt <- l8_ts %>% 
  group_by(county, yearmon) %>%
  summarize(ndvi=mean(ndvi, na.rm=T),
            prcp=mean(prcp_month)) 

# Lag the prcp
l8_ts_by_cnt <- l8_ts_by_cnt %>% 
  mutate(prcp_lag1=lag(prcp, 1),
         prcp_lag2=lag(prcp, 2))
```

Exclude rows before 1st observation for each county --> cannot interpolate NA values if 1st or last observation = NA
```{r}
# Identify the first observation for each county
l8_first_obs <- l8_ts_by_cnt %>%
  filter(!is.na(ndvi)) %>% 
  summarize(first_obs=min(yearmon),
            last_obs=max(yearmon))

# Exclude rows before 1st observation for each county 
l8_ts_cnt <- l8_ts_by_cnt[l8_ts_by_cnt$county==l8_first_obs$county[1] & l8_ts_by_cnt$yearmon >= 
                            l8_first_obs$first_obs[1] & l8_ts_by_cnt$yearmon <= l8_first_obs$last_obs[1],]
for (i in 2:nrow(l8_first_obs)){
  print(i)
  plot_tsibble <- l8_ts_by_cnt[l8_ts_by_cnt$county==l8_first_obs$county[i] & l8_ts_by_cnt$yearmon >= 
                                 l8_first_obs$first_obs[i] & l8_ts_by_cnt$yearmon <= l8_first_obs$last_obs[i],]
  l8_ts_cnt <- rbind(l8_ts_cnt, plot_tsibble)
}
```

Make it a tsibble and interpolate NDVI NA values
```{r}
l8_ts_cnt <- l8_ts_cnt %>% 
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         ndvi_int=na.approx(ndvi)) %>% 
  as_tsibble(index=yearmonth, key=county)

# Create reference and validation datasets
l8_ref_cnt <- l8_ts_cnt %>% filter(year(yearmonth) < 2017)
l8_val_cnt <- l8_ts_cnt %>% filter(year(yearmonth) >= 2017)

```

#### Sentinel-1
```{r}
s1_ts_by_cnt <- s1_ts %>% 
  group_by(county, yearmon) %>% 
  summarize(rvi=mean(rvi, na.rm=T),
            prcp=mean(prcp_month)) 

s1_ts_by_cnt <- s1_ts_by_cnt %>% 
  mutate(prcp_lag1=shift(prcp, n=1, type='lag'),
         prcp_lag2=shift(prcp, n=2, type='lag'))
```

Exclude rows before 1st observation for each county --> cannot interpolate NA values if 1st or last observation = NA
```{r}
# Identify the first observation date
s1_first_obs <- s1_ts_by_cnt %>%
  filter(!is.na(rvi)) %>% 
  summarize(first_obs=min(yearmon),
            last_obs=max(yearmon))

# Exclude rows before 1st observation for each county
s1_ts_cnt <- s1_ts_by_cnt[s1_ts_by_cnt$county==s1_first_obs$county[1] & s1_ts_by_cnt$yearmon >= 
                            s1_first_obs$first_obs[1] & s1_ts_by_cnt$yearmon <= s1_first_obs$last_obs[1],]
for (i in 2:nrow(l8_first_obs)){
  print(i)
  plot_tsibble <- s1_ts_by_cnt[s1_ts_by_cnt$county==s1_first_obs$county[i] & s1_ts_by_cnt$yearmon >= 
                                 s1_first_obs$first_obs[i] & s1_ts_by_cnt$yearmon <= s1_first_obs$last_obs[i],]
  s1_ts_cnt <- rbind(s1_ts_cnt, plot_tsibble)
}
```

Make it a tsibble and interpolate RVI NA values
```{r}
s1_ts_cnt <- s1_ts_cnt %>% 
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         rvi_int=na.approx(rvi)) %>% 
  as_tsibble(index=yearmonth, key=county)

# Create reference and validation datasets
s1_ref_cnt <- s1_ts_cnt %>% filter(year(yearmonth) < 2018)
s1_val_cnt <- s1_ts_cnt %>% filter(year(yearmonth) >= 2018)

```


## Fit SARIMA model (county)
#### Landsat 8
```{r}
# train model per county
l8_armax_cnt <- l8_ref_cnt %>%
  model(ARIMA(ndvi_int ~ prcp + prcp_lag1 + prcp_lag2, stepwise=T))

# Predict 
l8_fc_cnt <- fabletools::forecast(l8_armax_cnt, new_data = l8_val_cnt[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2', 'county')])

# Extract confidence levels
l8_cnt_ci <- l8_fc_cnt$ndvi_int %>% 
  hilo(level = 95) 
l8_fc_cnt <- l8_fc_cnt %>% 
  mutate(upper_95=l8_cnt_ci$upper,
         lower_95=l8_cnt_ci$lower)

# Plot per county
cnt <- 'Nyagatare'
ggplot()+
  geom_line(data=l8_ref_cnt[l8_ref_cnt$county==cnt,], 
            aes(x = yearmonth, y = ndvi - residuals(l8_armax_cnt[l8_armax_cnt$county==cnt,])$.resid), 
            col='darkred',lwd=0.65, alpha=0.6) +
  geom_line(data=l8_ts_cnt[l8_ts_cnt$county==cnt,], aes(x=yearmonth, y=ndvi_int), col='darkgreen',lwd=0.7)+
  geom_line(data=l8_ts_cnt[l8_ts_cnt$county==cnt,], 
            aes(x=yearmonth, y=normalize(prcp, method='range',c(0.1,0.2))), col='blue')+
  geom_line(data=l8_fc_cnt[l8_fc_cnt$county==cnt,], aes(x = yearmonth, y = .mean), 
            col='darkred',lwd=0.65, lty=2)+
  geom_ribbon(data=l8_fc_cnt[l8_fc_cnt$county==cnt,], aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.1, fill='red')+
  labs(y='NDVI', x='Time', title=paste('Actual (green) vs predicted (red) NDVI in',cnt,'including 95% CI'))
```

#### Senintel-1
```{r}
# Train model
s1_armax_cnt <- s1_ref_cnt %>%
  model(ARIMA(rvi_int ~ prcp + prcp_lag1 + prcp_lag2, stepwise=T))

# Predict
s1_fc_cnt <- forecast(s1_armax_cnt, new_data = s1_val_cnt[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2', 'county')])

# Extract confidence levels
s1_cnt_ci <- s1_fc_cnt$VV_int %>% 
  hilo(level = 95) 
s1_fc_cnt <- s1_fc_cnt %>% 
  mutate(upper_95=s1_cnt_ci$upper,
         lower_95=s1_cnt_ci$lower)

# Plot per county
cnt <- 'Nyagatare'
ggplot()+
  geom_line(data=s1_ref_cnt[s1_ref_cnt$county==cnt,], 
            aes(x = yearmonth, y = VV_int - residuals(s1_armax_cnt[s1_armax_cnt$county==cnt,])$.resid), 
            col='darkred',lwd=0.65, alpha=0.6) +
  geom_line(data=s1_ts_cnt[s1_ts_cnt$county==cnt,], aes(x=yearmonth, y=VV_int), col='darkgreen',lwd=0.7)+
  geom_line(data=s1_ts_cnt[s1_ts_cnt$county==cnt,], 
            aes(x=yearmonth, y=normalize(prcp, method='range',c(0.3,0.4))), col='blue')+
  geom_line(data=s1_fc_cnt[s1_fc_cnt$county==cnt,], aes(x = yearmonth, y = .mean),
            col='darkred',lwd=0.65,lty=2)+
  geom_ribbon(data=s1_fc_cnt[s1_fc_cnt$county==cnt,], aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.1, fill='red')+
  labs(y='RVI', x='Time', title=paste('Actual (green) vs predicted (red) RVI in',cnt,'including 95% CI'))
```


# Plot-level analysis
## Create plot-level tsibble with lagged variables
#### Landsat 8
```{r}
l8_ts_by_plt <- l8_ts %>% 
  group_by(plotID, yearmon) %>% 
  summarize(ndvi=mean(ndvi, na.rm=T),
            prcp=mean(prcp)) 
# Make lagged variables
l8_ts_by_plt <- l8_ts_by_plt %>% 
  mutate(prcp_lag1=data.table::shift(prcp, n=1, type='lag'),
         prcp_lag2=data.table::shift(prcp, n=2, type='lag')) 
```
Exclude rows before 1st observation for each plot --> cannot interpolate NA values if 1st or last observation = NA
```{r}
# Identify the first observation date 
l8_first_obs_plt <- l8_ts_by_plt %>%
  filter(!is.na(ndvi)) %>% 
  summarize(first_obs=min(yearmon),
            last_obs=max(yearmon))
# Exclude rows before 1st observation for each county
l8_ts_plt <- l8_ts_by_plt[l8_ts_by_plt$plotID==l8_first_obs_plt$plotID[1] & l8_ts_by_plt$yearmon >= 
                            l8_first_obs_plt$first_obs[1] & l8_ts_by_plt$yearmon <= l8_first_obs_plt$last_obs[1],]
for (i in 2:nrow(l8_first_obs_plt)){
  print(i)
  plot_tsibble <- l8_ts_by_plt[l8_ts_by_plt$plotID==l8_first_obs_plt$plotID[i] & l8_ts_by_plt$yearmon >= 
                                 l8_first_obs_plt$first_obs[i] & l8_ts_by_plt$yearmon <= l8_first_obs_plt$last_obs[i],]
  l8_ts_plt <- rbind(l8_ts_plt, plot_tsibble)
}


```
Make it a tsibble, interpolate the NAs and write as csv
```{r}
l8_ts_plt <- l8_ts_plt %>% 
  mutate(ndvi_int=na.approx(ndvi))

l8_ts_plt <- l8_ts_plt %>% 
  mutate(yearmonth=yearmonth(as.character(yearmon))) %>% 
  as_tsibble(index=yearmonth, key=plotID)

# Create reference and validation datasets
l8_ref_plt <- l8_ts_plt %>% filter(year(yearmonth) < 2017)
l8_val_plt <- l8_ts_plt %>% filter(year(yearmonth) >= 2017)

# Write the plot-level tsibble
fwrite(l8_ts_plt, paste0('output/time_series/', country, '_l8_plt.csv'))
```

#### Sentinel-1
```{r}
s1_ts_by_plt <- s1_ts %>% 
  group_by(plotID, yearmon) %>% 
  summarize(VV=mean(VV, na.rm=T),
            prcp=mean(prcp_month)) 
# Make lagged variables
s1_ts_by_plt <- s1_ts_by_plt %>% 
  mutate(prcp_lag1=shift(prcp, n=1, type='lag'),
         prcp_lag2=shift(prcp, n=2, type='lag')) 
```
Exclude rows before 1st observation for each plot --> cannot interpolate NA values if 1st or last observation = NA
```{r}
# Identify the first observation date 
s1_first_obs_plt <- s1_ts_by_plt %>%
  filter(!is.na(VV)) %>% 
  summarize(first_obs=min(yearmon),
            last_obs=max(yearmon))
# Exclude rows before 1st observation for each county
s1_ts_plt <- s1_ts_by_plt[s1_ts_by_plt$plotID==s1_ts_by_plt$plotID[1] & s1_ts_by_plt$yearmon >= 
                            s1_first_obs_plt$first_obs[1] & s1_ts_by_plt$yearmon <= s1_first_obs_plt$last_obs[1],]
for (i in 2:nrow(s1_first_obs_plt)){
  print(i)
  plot_tsibble <- s1_ts_by_plt[s1_ts_by_plt$plotID==s1_first_obs_plt$plotID[i] & s1_ts_by_plt$yearmon >= 
                                 s1_first_obs_plt$first_obs[i] & s1_ts_by_plt$yearmon <= s1_first_obs_plt$last_obs[i],]
  s1_ts_plt <- rbind(s1_ts_plt, plot_tsibble)
}
```
Make it a tsibble, interpolate the NAs and write as csv
```{r}
# Make it a tsibble and interpolate the NAs
s1_ts_plt <- s1_ts_plt %>% 
  mutate(yearmonth=yearmonth(as.character(yearmon)),
         VV_int=na.approx(VV)) %>% 
  as_tsibble(index=yearmonth, key=plotID)

# Create reference and validation datasets
s1_ref_plt <- s1_ts_plt %>% filter(year(yearmonth) < 2018)
s1_val_plt <- s1_ts_plt %>% filter(year(yearmonth) >= 2018)

# Write as csv
fwrite(s1_ts_plt, paste0('Rdata/output/time_series/', country, '_s1_plt.csv'))
```

## Fit SARIMA model (plot)
#### Landsat 8
```{r}
# Train model
l8_armax_plt <- l8_ref_plt %>%
  model(ARIMA(ndvi_int ~ prcp_lag1 + prcp_lag2 + pdq(1, 0, 1) + PDQ(1, 0, 0)))

# Predict
l8_fc_plt <- fabletools::forecast(l8_armax_plt, new_data = l8_val_plt[,c('yearmonth', 'prcp_lag1', 'prcp_lag2', 'plotID')])

# Extract confidence levels
l8_plt_ci <- l8_fc_plt$ndvi_int %>% 
  hilo(level = 95) 
l8_fc_plt <- l8_fc_plt %>% 
  mutate(upper_95=l8_plt_ci$upper,
         lower_95=l8_plt_ci$lower)

# save model and forecast
save(l8_fc_plt, file = paste0('output/models/', country,'_l8_fc_plt.RDS'))
save(l8_armax_plt, file = paste0('output/models/', country,'_l8_armax_plt.RDS'))

# Plot result per plot
plt <- 5602
ggplot()+
  geom_line(data=l8_ref_plt[l8_ref_plt$plotID==plt,], 
            aes(x = yearmonth, y = ndvi_int - residuals(l8_armax_plt[l8_armax_plt$plotID==plt,])$.resid), 
            col='darkred',lwd=0.65, alpha=0.6) +
  geom_line(data=l8_ts_plt[l8_ts_plt$plotID==plt,], aes(x=yearmonth, y=ndvi_int), col='darkgreen',lwd=0.7)+
  geom_line(data=l8_ts_plt[l8_ts_plt$plotID==plt,], 
            aes(x=yearmonth, y=normalize(prcp, method='range',c(0.2,0.3))), col='blue')+
  geom_line(data=l8_fc_plt[l8_fc_plt$plotID==plt,], aes(x = yearmonth, y = .mean), 
            col='darkred',lwd=0.65, lty=2)+
  geom_ribbon(data=l8_fc_plt[l8_fc_plt$plotID==plt,], aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.2, fill='red')+
  geom_point(data = l8_ts[l8_ts$plotID==plt,], aes(x = yearmon, y = ndvi), alpha=0.5)+
  geom_vline(xintercept=plots[plots$plotID==plt,]$plant_date,lty=3,alpha=0.75)+
  labs(y='NDVI', x='Time', title=paste('Actual (green) vs predicted (red) NDVI in including 95% CI'))
```

#### Sentinel-1
```{r}
# Train model 
s1_armax_plt <- s1_ref_plt %>%
  model(ARIMA(VV_int ~ prcp + prcp_lag1 + prcp_lag2 + pdq(1, 0, 1) + PDQ(1, 0, 0)))

# Predict
s1_fc_plt <- forecast(s1_armax_plt, new_data = s1_val_plt[,c('yearmonth', 'prcp', 'prcp_lag1', 'prcp_lag2', 'plotID')])

# Extract confidence levels
s1_plt_ci <- s1_fc_plt$VV_int %>% 
  hilo(level = 95) 
s1_fc_plt <- s1_fc_plt %>% 
  mutate(upper_95=s1_plt_ci$upper,
         lower_95=s1_plt_ci$lower)

# Save model and forecast
save(s1_armax_plt, file = paste0('output/models/', country,'_s1_fc_plt.RDS'))
save(s1_fc_plt, file = paste0('output/models/', country,'_s1_armax_plt.RDS'))

# Plot per plot
plt <- 15035
ggplot()+
  geom_line(data=s1_ref_plt[s1_ref_plt$plotID==plt,], 
            aes(x = yearmonth, y = VV_int - residuals(s1_armax_plt[s1_armax_plt$plotID==plt,])$.resid), 
            col='darkred',lwd=0.65, alpha=0.6) +
  geom_line(data=s1_ts_plt[s1_ts_plt$plotID==plt,], aes(x=yearmonth, y=VV_int), col='darkgreen',lwd=0.7)+
  geom_line(data=s1_ts_plt[s1_ts_plt$plotID==plt,], 
            aes(x=yearmonth, y=normalize(prcp, method='range',c(-15,-13))), col='blue')+
  geom_line(data=s1_fc_plt[s1_fc_plt$plotID==plt,], aes(x = yearmonth, y = .mean), 
            col='darkred',lwd=0.65, lty=2)+
  geom_ribbon(data=s1_fc_plt[s1_fc_plt$plotID==plt,], aes(x=yearmonth, ymin=lower_95, ymax=upper_95),
              alpha=0.1, fill='red')+
  geom_point(data = s1_ts[s1_ts$plotID==plt,], aes(x = yearmon, y = VV), alpha=0.5)+
  geom_vline(xintercept=plots[plots$plotID==plt,]$plant_date,lty=3,alpha=0.75)+
  labs(y='VV', x='Time', title=paste('Actual (green) vs predicted (red) VV in including 95% CI'))
```
